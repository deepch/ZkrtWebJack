{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/DroneMsg/": {
            "get": {
                "tags": [
                    "DroneMsg"
                ],
                "description": "get DroneMsg",
                "operationId": "DroneMsgController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.DroneMsg"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "DroneMsg"
                ],
                "description": "create DroneMsg",
                "operationId": "DroneMsgController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for DroneMsg content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DroneMsg"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.DroneMsg"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/DroneMsg/{id}": {
            "get": {
                "tags": [
                    "DroneMsg"
                ],
                "description": "get DroneMsg by id",
                "operationId": "DroneMsgController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.DroneMsg"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "DroneMsg"
                ],
                "description": "update the DroneMsg",
                "operationId": "DroneMsgController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for DroneMsg content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DroneMsg"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.DroneMsg"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "DroneMsg"
                ],
                "description": "delete the DroneMsg",
                "operationId": "DroneMsgController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/ZkrtUser/": {
            "get": {
                "tags": [
                    "ZkrtUser"
                ],
                "description": "get ZkrtUser",
                "operationId": "ZkrtUserController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.ZkrtUser"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "ZkrtUser"
                ],
                "description": "create ZkrtUser",
                "operationId": "ZkrtUserController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ZkrtUser content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ZkrtUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ZkrtUser"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/ZkrtUser/{id}": {
            "get": {
                "tags": [
                    "ZkrtUser"
                ],
                "description": "get ZkrtUser by id",
                "operationId": "ZkrtUserController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.ZkrtUser"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "ZkrtUser"
                ],
                "description": "update the ZkrtUser",
                "operationId": "ZkrtUserController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ZkrtUser content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ZkrtUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.ZkrtUser"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ZkrtUser"
                ],
                "description": "delete the ZkrtUser",
                "operationId": "ZkrtUserController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.DroneMsg": {
            "title": "DroneMsg",
            "type": "object",
            "properties": {
                "DroneMsgAlt": {
                    "type": "string"
                },
                "DroneMsgDroneGPS": {
                    "type": "string"
                },
                "DroneMsgP": {
                    "type": "string"
                },
                "DroneMsgPeoGPS": {
                    "type": "string"
                },
                "DroneMsgPhotoPath": {
                    "type": "string"
                },
                "DroneMsgR": {
                    "type": "string"
                },
                "DroneMsgTime": {
                    "type": "string"
                },
                "DroneMsgVideoPath": {
                    "type": "string"
                },
                "DroneMsgY": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.ZkrtUser": {
            "title": "ZkrtUser",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "ZkrtFastName": {
                    "type": "string"
                },
                "ZkrtJurisdiction": {
                    "type": "integer",
                    "format": "int64"
                },
                "ZkrtLastName": {
                    "type": "string"
                },
                "ZkrtPassword": {
                    "type": "string"
                },
                "ZkrtTime": {
                    "type": "string"
                },
                "ZkrtUser": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "DroneMsg",
            "description": "DroneMsgController operations for DroneMsg\n"
        },
        {
            "name": "ZkrtUser",
            "description": "ZkrtUserController operations for ZkrtUser\n"
        }
    ]
}